"シンタックス表示
syntax on

"UTF-8のファイルを表示する
set encoding=utf-8

"行番号を表示する
set number

"右下に表示されるルーラー（行列の番号）を表示する
set ruler

"Tabを挿入する際に，適切な数の空白を使用する
set expandtab

"ファイル内の<TAB>が対応する空白の数
set tabstop=4


"改行時に自動でインデントを付与する
set autoindent

"自動インデント時にインデントする文字数
set shiftwidth=4


"C言語のインデント機能を有効にする
set cindent


"ファイルのタイトルを表示する
set title

"backspaceキーを押した時に消せるようにする設定
set backspace=indent,eol,start

"ファイルの上書きの前にバックアップファイルを作らない
set nowritebackup

"viとの互換モードをOFFにする
set nocompatible


"カーソルを行末と行頭でとまらないようにする
set whichwrap=b,s,[,],<,>


"- - - - - - 画面関係 - - - - - -
"vimのコメントの色を変更する
hi Comment ctermfg=2

"現在のモードを表示する
set showmode

"画面端で行を折り返して表示
set wrap

"- - - - - - 検索機能 - - - - - - 
"検索がファイルの末尾まで進んだらファイルの先頭から再び検索する
set wrapscan


"インクリメンタル検索のオン（入力と同時に検索を開始する）
set incsearch

"検索結果をハイライト表示する
set hlsearch

"ハイライトが残っていると気が散るのでさようなら
nnoremap <C-k><C-k> :nohlsearch<CR><Esc>

"- - - - - - 便利機能 - - - - - - 

"閉じカッコが入力された時に対応するカッコを表示する
set showmatch matchtime=1

"クリップボード機能を有効にする(Visualモードで選択されたものをコピーできる)
set clipboard+=autoselect

"Visualモードで選択されたテキストが，自動的にクリップボードレジスタにコピーされる
set guioptions+=a


"vimでファイルを開くときにタブなどでファイル名の補完が出来る
set wildmenu
    

"- - - - - - Plugin機能 - - - - - -
"プラグインの利用を可能にする
filetype plugin indent on

"- - - - - - ZenCoding- - - - - -
"ZenCodingの設定変更等

"インデントは半角スペース４個
let g:user_zen_settings = {
            \'indentation' : '    ',
            \}
"便利設定
let g:user_zen_settings = {
            \  'lang' : 'ja',
            \  'html' : {
            \    'filters' : 'html',
            \    'snippets' : {
            \      'jq' : "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n<script>\n\\$(function() {\n\t|\n})()\n</script>",
            \      'cd' : "<![CDATA[|]]>",
            \    },
            \  },
            \  'php' : {
            \    'extends' : 'html',
            \    'filters' : 'html,c',
            \  },
            \  'javascript' : {
            \    'snippets' : {
            \      'jq' : "\\$(function() {\n\t\\${cursor}\\${child}\n});",
            \      'jq:json' : "\\$.getJSON(\"${cursor}\", function(data) {\n\t\\${child}\n});",
            \      'jq:each' : "\\$.each(data, function(index, item) {\n\t\\${child}\n});",
            \      'fn' : "(function() {\n\t\\${cursor}\n})();",
            \      'tm' : "setTimeout(function() {\n\t\\${cursor}\n}, 100);",
            \    },
            \    'use_pipe_for_cursor' : 0,
            \  },
            \  'css' : {
            \    'filters' : 'fc',
            \    'snippets' : {
            \      'box-shadow' : "-webkit-box-shadow: 0 0 0 # 000;\n-moz-box-shadow: 0 0 0 0 # 000;\nbox-shadow: 0 0 0 # 000;",
            \    },
            \  },
            \  'less' : {
            \    'filters' : 'fc',
            \    'extends' : 'css',
            \  },
            \}


"- - - - - - Autocompletion - - - - - -
"自動補完の色を変更する
highlight Pmenu     ctermbg=4
highlight PmenuSel  ctermbg=1
highlight PMenuSbar ctermbg=4

"<TAB>で補完
" {{{ Autocompletion using the TAB key
" This function determines, wether we are on the start of the line text (then tab indents) or
" if we want to try autocompletion
"
"function! InsertTabWrapper()
"        let col = col('.') - 1
"        if !col || getline('.')[col - 1] !~ '\k'
"                return "\<TAB>"
"        else
"                if pumvisible()
"                        return "\<C-N>"
"                else
"                        return "\<C-N>\<C-P>"
"                end
"        endif
"endfunction
"" Remap the tab key to select action with InsertTabWrapper
"inoremap <tab> <c-r>=InsertTabWrapper()<cr>


"- - - - - -Binaryファイルの表示 - - - - - -
augroup Binary
  autocmd!
  autocmd BufReadPre  *.bin let &bin=1
  autocmd BufReadPost * if &bin | silent %!xxd -g 1
  autocmd BufReadPost * set filetype=xxd | endif
  autocmd BufWritePre * if &bin | %!xxd -r
  autocmd BufWritePost * if &bin | silent %!xxd -g 1
  autocmd BufWritePost * set nomod | endif
augroup END


"- - - - - -vimでマウスの利用 - - - - - -
" Enable mouse support.
set mouse=a

" For screen.
if &term =~ "^screen"
    augroup MyAutoCmd
        autocmd VimLeave * :set mouse=
     augroup END

    " screenでマウスを使用するとフリーズするのでその対策
    set ttymouse=xterm2
endif

if has('gui_running')
    " Show popup menu if right click.
    set mousemodel=popup

    " Don't focus the window when the mouse pointer is moved.
    set nomousefocus
    " Hide mouse pointer on insert mode.
    set mousehide
endif


"- - - - - -neocomplcacheの設定 - - - - - -
"neocomplcache
let g:neocomplcache_enable_at_startup = 1 " 起動時に有効化
